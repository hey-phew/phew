#include <iostream>
#include <string.h>
#include <iomanip>
using namespace std;

class db
{
    int roll;
    char name[20];
    char Class[20];
    char Div[20];
    char dob[20];
    char bg[10], contact[20];
    char phone[20], lisence[20];

public:
    static int stdno;

    static void count()
    {
        cout << "\n Number Of Objects Created: " << stdno;
    }
    void fin()
    {
        cout << "\n Inline Function!";
    }
    db()
    {
        roll = 1;
        strcpy(name, "Pumang Kirange");
        strcpy(Class, "II");
        strcpy(Div, "A");
        strcpy(dob, "29/02/2004");
        strcpy(bg, "A+ve");
        strcpy(contact, "Pimpri");
        strcpy(phone, "9890075898");
        strcpy(lisence, "ABC011252LD");
        ++stdno;
    }
    db(db *ob)
    {
        strcpy(name, ob->name);
        strcpy(Class, ob->Class);
        strcpy(Div, ob->Div);
        strcpy(dob, ob->dob);
        strcpy(bg, ob->bg);
        strcpy(contact, ob->contact);
        strcpy(phone, ob->phone);
        strcpy(lisence, ob->lisence);
        ++stdno;
    }
    void getdata()
    {
        cout << "\n \nEnter:Name,Roll No.,Class,Division,DOB,Blood Group,Contact,Phone,Lisence\n";
        cin >> name >> roll >> Class >> Div >> dob >> bg >> contact >> phone >> lisence;
    }

    friend void display(db d);

    ~db()
    {
        cout << "\n\n"
             << this->stdno << "-" << this->name << "(Object) is destroyed!";
    }
};
void display(db d)
{
    cout << "\n\nName: " << d.name << "\nRoll No.: " << d.roll << "\nClass: " << d.Class << "\nDivision: " << d.Div << "\nDOB" << d.dob << "\nBlood Group: " << d.bg << "\nContact: " << d.contact << "\nPhone: " << d.phone << "\nLicense: " << d.lisence << endl;
}

int db::stdno;

int main()
{
    int n, i;
    db d1, *ptr[2];
    cout << "Default values:";
    display(d1);

    d1.getdata();
    cout << endl;
    display(d1);

    db d2(&d1);
    cout << "\n\nUse Of Copy Constructor:";
    display(d2);

    cout << "How many objects you want to create?:";
    cin >> n;

    for (i = 0; i < n; i++)
    {
        ptr[i] = new db();
        ptr[i]->getdata();
    }

    for (i = 0; i < n; i++)
    {
        display(*ptr[i]);
    }

    db::count();

    for (i = 0; i < n; i++)
    {
        delete (ptr[i]);
    }
    cout << "\nObjects deleted!";
    return 0;
}